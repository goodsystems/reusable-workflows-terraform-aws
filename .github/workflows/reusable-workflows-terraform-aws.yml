on:
  workflow_call:
    inputs:
      project:
        description: 'Project name'
        required: true
        type: string

      working-directory:
        description: 'Working directory'
        required: false
        type: string
        default: './tofu/'

      artifact-name:
        type: string

 
jobs:

#--------------------------------------------------------------------------------------------------------------
# OpenTofu plan jobs
#--------------------------------------------------------------------------------------------------------------
  
  reconcile:
    if: github.event_name == 'schedule'
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "staging"
            bucket_name: "${{ vars.TFSTATE_S3BUCKET_PREFIX }}-staging-terraform-state"
            role-to-assume: "${{ vars.AWS_ROLE_TO_ASSUME_STAGING }}"
          - name: "production"
            bucket_name: "${{ vars.TFSTATE_S3BUCKET_PREFIX }}-production-terraform-state"
            role-to-assume: "${{ vars.AWS_ROLE_TO_ASSUME_PRODUCTION }}"

    name: "Reconcile ${{ matrix.name }}"
    runs-on: ubuntu-latest
    container:
      image:  ghcr.io/opentofu/opentofu:1.6.2
    environment:
      name: "terraform-plan-${{ matrix.name }}"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
  
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: "sts.amazonaws.com"
          role-to-assume: "${{ matrix.role-to-assume }}"
          aws-region: "us-east-1"
          
      - name: OpenTofu Init
        working-directory: "${{ inputs.working-directory }}"
        run: tofu init -backend-config="region=us-east-1" -backend-config="key=${{ inputs.project }}/terraform.tfstate" -backend-config="bucket=${{ matrix.bucket_name }}" -backend-config="dynamodb_table=${{ matrix.bucket_name }}-lock"

      - name: Download artifact
        if: "${{ inputs.artifact-name != '' }}"
        uses: actions/download-artifact@v4
        with:
          name: "${{ inputs.artifact-name }}"

      - name: OpenTofu Plan
        working-directory: "${{ inputs.working-directory }}"
        run: tofu plan -no-color -var="project=${{ inputs.project }}" -var-file="vars_${{ matrix.name }}.tfvars" -detailed-exitcode

      - name: Reconcile status
        if: always()
        run: |
            if [ $? -eq 0 ]; then
              echo "Infrastructure is reconciled with the state"
            else
              echo "Infrastructure is not reconciled or the plan failed"
              exit 1
            fi

  plan:
    if: github.event_name != 'schedule'
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "staging"
            bucket_name: "${{ vars.TFSTATE_S3BUCKET_PREFIX }}-staging-terraform-state"
            role-to-assume: "${{ vars.AWS_ROLE_TO_ASSUME_STAGING }}"
          - name: "production"
            bucket_name: "${{ vars.TFSTATE_S3BUCKET_PREFIX }}-production-terraform-state"
            role-to-assume: "${{ vars.AWS_ROLE_TO_ASSUME_PRODUCTION }}"

    name: "Plan ${{ matrix.name }}"
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/opentofu/opentofu:1.6.2
    environment:
      name: "terraform-plan-${{ matrix.name }}"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
  
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: "sts.amazonaws.com"
          role-to-assume: "${{ matrix.role-to-assume }}"
          aws-region: "us-east-1"
          
      - name: OpenTofu Init
        working-directory: "${{ inputs.working-directory }}"
        run: tofu init -backend-config="region=us-east-1" -backend-config="key=${{ inputs.project }}/terraform.tfstate" -backend-config="bucket=${{ matrix.bucket_name }}" -backend-config="dynamodb_table=${{ matrix.bucket_name }}-lock"

      - name: Download artifact
        if: "${{ inputs.artifact-name != '' }}"
        uses: actions/download-artifact@v4
        with:
          name: "${{ inputs.artifact-name }}"

      - name: OpenTofu Format Check
        working-directory: "${{ inputs.working-directory }}"
        run: tofu fmt -check

      - name: OpenTofu Validate
        working-directory: "${{ inputs.working-directory }}"
        run: tofu validate

      - name: OpenTofu Plan
        working-directory: "${{ inputs.working-directory }}"
        run: tofu plan -no-color -var="project=${{ inputs.project }}" -var-file="vars_${{ matrix.name }}.tfvars" -out=plan.tfplan

      - name: Publish plan
        uses: actions/upload-artifact@v4
        with:
          name: "terraform-plan-${{ inputs.project }}-${{ matrix.name }}"
          path: "${{ inputs.working-directory }}plan.tfplan"
          retention-days: 7


#--------------------------------------------------------------------------------------------------------------
# OpenTofu deploy jobs
#--------------------------------------------------------------------------------------------------------------
  deploy:
    needs: plan
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    strategy:
      matrix: 
        include:
            - name: "staging"
              bucket_name: "${{ vars.TFSTATE_S3BUCKET_PREFIX }}-staging-terraform-state"
              role-to-assume: "${{ vars.AWS_ROLE_TO_ASSUME_STAGING }}"
            - name: "production"
              bucket_name: "${{ vars.TFSTATE_S3BUCKET_PREFIX }}-production-terraform-state"
              role-to-assume: "${{ vars.AWS_ROLE_TO_ASSUME_PRODUCTION }}"
        
    name: "Apply ${{ matrix.name }}"
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/opentofu/opentofu:1.6.2
    environment: 
      name: "terraform-apply-${{ matrix.name }}"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: "sts.amazonaws.com"
          role-to-assume: "${{ matrix.role-to-assume }}"
          aws-region: "us-east-1"

      - name: OpenTofu Init
        working-directory: "${{ inputs.working-directory }}"
        run: tofu init -backend-config="region=us-east-1" -backend-config="key=${{ inputs.project }}/terraform.tfstate" -backend-config="bucket=${{ matrix.bucket_name }}" -backend-config="dynamodb_table=${{ matrix.bucket_name }}-lock"

      - name: Download artifact
        if: "${{ inputs.artifact-name != '' }}"
        uses: actions/download-artifact@v4
        with:
          name: "${{ inputs.artifact-name }}"

      - name: Download plan artifact
        uses: actions/download-artifact@v4
        with:
          name: "terraform-plan-${{ inputs.project }}-${{ matrix.name }}"
          path: "${{ inputs.working-directory }}"

      - name: OpenTofu Apply
        working-directory: "${{ inputs.working-directory }}"
        run: tofu apply -input=false -no-color plan.tfplan

